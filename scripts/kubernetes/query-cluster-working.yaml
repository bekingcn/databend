---
apiVersion: v1
data:
  # minio
  STORAGE_S3_ACCESS_KEY_ID: bWluaW8=
  # sample-storage
  # STORAGE_S3_BUCKET: c2FtcGxlLXN0b3JhZ2U=
  # STORAGE_S3_ENDPOINT_URL: "aHR0cDovL21pbmlvLm1pbmlvLnN2Yy5jbHVzdGVyLmxvY2FsOjkwMDA="
  # should be http://minio.default.svc.cluster.local:9000
  # STORAGE_S3_ENDPOINT_URL: "aHR0cDovL21pbmlvLmRlZmF1bHQuc3ZjLmNsdXN0ZXIubG9jYWw6OTAwMAo="
  STORAGE_S3_REGION: dXMtZWFzdC0x
  # minio123
  STORAGE_S3_SECRET_ACCESS_KEY: bWluaW8xMjM=  
  # s3
  STORAGE_TYPE: czM=
kind: Secret
metadata:
  annotations:
    meta_address: meta-service.databend-system.svc.cluster.local:9191
  labels:
    QUERY_CLUSTER_ID: hello-world
    QUERY_TENANT_ID: tenant1
    app: databend-query
    cluster: hello-world
    tenant: tenant1
  name: query-secrets
  namespace: tenant1
type: Opaque
---
apiVersion: v1
kind: Service
metadata:
  annotations:
    meta_address: meta-service.databend-system.svc.cluster.local:9191
    prometheus.io/path: /metrics
    prometheus.io/port: "7070"
    prometheus.io/scrape: "true"
  labels:
    QUERY_CLUSTER_ID: hello-world
    QUERY_TENANT_ID: tenant1
    app: databend-query
    cluster: hello-world
    tenant: tenant1
  name: query-service
  namespace: tenant1
spec:
  ports:
    - name: http
      port: 8000
      targetPort: 8000
    - name: admin
      port: 8080
      targetPort: 8080
    - name: metrics
      port: 7070
      targetPort: 7070
    - name: mysql
      port: 3307
      targetPort: 3307
    - name: clickhouse
      port: 9000
      targetPort: 9000
    - name: flight
      port: 9090
      targetPort: 9090
  selector:
    QUERY_CLUSTER_ID: hello-world
    QUERY_TENANT_ID: tenant1
    app: databend-query
    cluster: hello-world
    tenant: tenant1
---
# query-config cm
apiVersion: v1
kind: ConfigMap
metadata:
  name: query-config
  namespace: tenant1
data:
  query-config.toml: |-
    [[query.users]]
    name = "root"
    auth_type = "no_password"
---
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    meta_address: meta-service.default.svc.cluster.local:9191
    prometheus.io/path: /metrics
    prometheus.io/port: "10010"
    prometheus.io/scrape: "true"
  labels:
    QUERY_CLUSTER_ID: hello-world
    QUERY_TENANT_ID: tenant1
    app: databend-query
    cluster: hello-world
    tenant: tenant1
  name: query
  namespace: tenant1
spec:
  replicas: 3
  selector:
    matchLabels:
      QUERY_CLUSTER_ID: hello-world
      QUERY_TENANT_ID: tenant1
      app: databend-query
      cluster: hello-world
      tenant: tenant1
  template:
    metadata:
      annotations:
        meta_address: meta-service.default.svc.cluster.local:9191
        prometheus.io/path: /metrics
        prometheus.io/port: "10010"
        prometheus.io/scrape: "true"
      labels:
        QUERY_CLUSTER_ID: hello-world
        QUERY_TENANT_ID: tenant1
        app: databend-query
        cluster: hello-world
        tenant: tenant1
    spec:
      volumes:
        - name: logs
          emptyDir: {}
        - name: "query-config"
          configMap:
            name: "query-config"
            items:
            - key: "query-config.toml"
              path: "query-config.toml"
      containers:
        - command:
            - /databend-query
          volumeMounts:
            - name: logs
              mountPath: "/log"
            - name: query-config
              mountPath: "/query-config.toml"
              subPath: "query-config.toml"
          args: ["-c", "/query-config.toml"]
          env:
            - name: LOG_DIR
              value: /log
            - name: META_ENDPOINTS
              value: meta-service.default.svc.cluster.local:9191
              # valueFrom:
              #  fieldRef:
              #     fieldPath: metadata.annotations['meta_address']
            # - name: META_USERNAME
            #   value: root
            # - name: META_PASSWORD
            #   value: root
            - name: USERNAME
              value: root
            - name: PASSWORD
              value: root
            - name: STORAGE_S3_ENDPOINT_URL
              value: http://minio.default.svc.cluster.local:9000
            - name: STORAGE_S3_BUCKET
              value: tpch
            - name: QUERY_TENANT_ID
              valueFrom:
                fieldRef:
                  fieldPath: metadata.labels['tenant']
            - name: QUERY_CLUSTER_ID
              valueFrom:
                fieldRef:
                  fieldPath: metadata.labels['cluster']
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: POD_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            - name: POD_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.podIP
            - name: QUERY_HTTP_HANDLER_HOST
              value: "0.0.0.0"
            - name: QUERY_HTTP_HANDLER_PORT
              value: "8000"
            - name: QUERY_ADMIN_API_ADDRESS
              value: "0.0.0.0:8080"
            - name: QUERY_METRIC_API_ADDRESS
              value: "0.0.0.0:7070"
            - name: QUERY_MYSQL_HANDLER_HOST
              value: "0.0.0.0"
            - name: QUERY_MYSQL_HANDLER_PORT
              value: "3307"
            - name: QUERY_CLICKHOUSE_HTTP_HANDLER_HOST
              value: "0.0.0.0"
            - name: QUERY_CLICKHOUSE_HTTP_HANDLER_PORT
              value: "8124"
            - name: QUERY_FLIGHT_API_ADDRESS
              value: "$(POD_IP):9090"
            # allow http://xxx
            - name: STORAGE_ALLOW_INSECURE
              value: "true"
          envFrom:
            - secretRef:
                name: query-secrets
          image: datafuselabs/databend-query:latest
          name: query
          ports:
            - name: http
              containerPort: 8000
            - name: admin
              containerPort: 8080
            - name: metrics
              containerPort: 7070
            - name: mysql
              containerPort: 3307
            - name: clickhouse
              containerPort: 9000
            - name: flight
              containerPort: 9090
          readinessProbe:
            httpGet:
              path: /v1/health
              port: 8080
          resources:
            limits:
              cpu: 900m
              memory: 900Mi
            requests:
              cpu: 100m
              memory: 100Mi
